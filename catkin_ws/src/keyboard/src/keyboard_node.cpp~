#include <termios.h>
#include <signal.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/poll.h>

#include <boost/thread/thread.hpp>
#include <ros/ros.h>
#include <geometry_msgs/Twist.h>

#define KEYCODE_UP 0x85 // 5, Z axis up
#define KEYCODE_LEFT 0x81 // 1, Z rotate clockwise
#define KEYCODE_RIGHT 0x83 // 3, Z rotate anticlockwise
#define KEYCODE_DOWN 0x82 // 2, Z axis down

#define KEYCODE_A_CAP 0x61 // Y axis up
#define KEYCODE_D_CAP 0x64 // Y axis down
#define KEYCODE_S_CAP 0x73 // X axis up
#define KEYCODE_W_CAP 0x77 // X axis down

class KeyboardTeleopNode
{
    private:
        double walk_vel_;
        double run_vel_;
        double yaw_rate_;
        double yaw_rate_run_;
        
        geometry_msgs::Twist cmdvel_;
        ros::NodeHandle n_;
        ros::Publisher pub_;

    public:
        KeyboardTeleopNode()
        {
            pub_ = n_.advertise<geometry_msgs::Twist>("cmd_vel", 1);
            
            ros::NodeHandle n_private("~");
            n_private.param("walk_vel", walk_vel_, 0.5);
            n_private.param("yaw_rate", yaw_rate_, 1.0);
        }
        
        ~KeyboardTeleopNode() { }
        void keyboardLoop();
        
        void stopRobot()
        {
            cmdvel_.linear.x = 0.0;
	    cmdvel_.linear.y = 0.0;
	    cmdvel_.linear.z = 0.0;
	    cmdvel_.angular.z = 0.0;
            pub_.publish(cmdvel_);
        }
};

KeyboardTeleopNode* tbk;
int kfd = 0;
struct termios cooked, raw;
bool done;

int main(int argc, char** argv)
{
    ros::init(argc,argv,"tbk", ros::init_options::AnonymousName | ros::init_options::NoSigintHandler);
    KeyboardTeleopNode tbk;
    
    boost::thread t = boost::thread(boost::bind(&KeyboardTeleopNode::keyboardLoop, &tbk));
    
    ros::spin();
    
    t.interrupt();
    t.join();
    tbk.stopRobot();
    tcsetattr(kfd, TCSANOW, &cooked);
    
    return(0);
}

void KeyboardTeleopNode::keyboardLoop()
{
    char c;
    double max_tv = walk_vel_;
    double max_rv = yaw_rate_;
    bool dirty = false;
    int x_speed = 0;
    int y_speed = 0;
    int z_speed = 0;
    int z_turn = 0;
    
    
    // get the console in raw mode
    tcgetattr(kfd, &cooked);
    memcpy(&raw, &cooked, sizeof(struct termios));
    raw.c_lflag &=~ (ICANON | ECHO);
    raw.c_cc[VEOL] = 1;
    raw.c_cc[VEOF] = 2;
    tcsetattr(kfd, TCSANOW, &raw);
    
    puts("Reading from keyboard");
    puts("Use WASD keys to control the robot");
    // puts("Press Shift to move faster");
    
    struct pollfd ufd;
    ufd.fd = kfd;
    ufd.events = POLLIN;
    
    for(;;)
    {
        boost::this_thread::interruption_point();
        
        // get the next event from the keyboard
        int num;
        
        if ((num = poll(&ufd, 1, 250)) < 0)
        {
            perror("poll():");
            return;
        }
        else if(num > 0)
        {
            if(read(kfd, &c, 1) < 0)
            {
                perror("read():");
                return;
            }
        }
        else
        {
            if (dirty == true)
            {
                stopRobot();
                dirty = false;
            }
            
            continue;
        }
        
        switch(c)
        {
            case KEYCODE_UP:
	      //max_tv = walk_vel_;
                x_speed = 0;
		y_speed = 0;
		z_speed = 1;
                z_turn = 0;
                dirty = true;
                break;
            case KEYCODE_DOWN:
	      // max_tv = walk_vel_;
                x_speed = 0;
		y_speed = 0;
		z_speed = -1;
                z_turn = 0;
                dirty = true;
                break;
            case KEYCODE_LEFT:
	      // max_rv = yaw_rate_;
	        x_speed = 0;
		y_speed = 0;
		z_speed = 0;
                z_turn = 1;
                dirty = true;
                break;
            case KEYCODE_RIGHT:
              //  max_rv = yaw_rate_;
                x_speed = 0;
		y_speed = 0;
		z_speed = 0;
                z_turn = -1;
                dirty = true;
                break;
                
            case KEYCODE_W_CAP:
              //  max_tv = run_vel_;
                x_speed = 1;
		y_speed = 0;
		z_speed = 0;
                z_turn = 0;
                dirty = true;
                break;
            case KEYCODE_S_CAP:
              //  max_tv = run_vel_;
                x_speed = -1;
		y_speed = 0;
		z_speed = 0;
                z_turn = 0;
                dirty = true;
                break;
            case KEYCODE_A_CAP:
	      //max_rv = yaw_rate_run_;
                x_speed = 0;
		y_speed = 1;
		z_speed = 0;
                z_turn = 0;
                dirty = true;
                break;
            case KEYCODE_D_CAP:
	      // max_rv = yaw_rate_run_;
                x_speed = 0;
		y_speed = -1;
		z_speed = 0;
                z_turn = 0;
                dirty = true;
                break;
                
            default:
	      //max_tv = walk_vel_;
              //max_rv = yaw_rate_;
                x_speed = 0;
		y_speed = 0;
		z_speed = 0;
                z_turn = 0;
                dirty = false;
        }
        
        cmdvel_.linear.x = x_speed * max_tv;
	cmdvel_.linear.y = y_speed * max_tv;
	cmdvel_.linear.z = z_speed * max_tv;
	cmdvel_.angular.z = z_turn * max_rv;
	
        pub_.publish(cmdvel_);
    }
}
